#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

BUILDPACK_VERSION="1.0.48"

#######################
# 0. Helper Functions #
#######################

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

# Allows us to retrieve ENV variables modified by end user
# In Heroku CLI, see heroku:config set EXAMPLE_ENV_VAR=foobar
function getenv() {
    ENV_NAME="$1"
    DEFAULT="$2"
    ENV_VAL="$DEFAULT"

    if [ -f "$ENV_DIR/$ENV_NAME" ]; then
        ENV_VAL=$(cat "$ENV_DIR/$ENV_NAME")
    fi

    echo "$ENV_VAL"
}

function log {
  echo "-----> $1"
}

function info {
  echo "        $1"
}

################################
# 1. Get Environment Variables #
################################

BUILDPACK_DIR=$(cd $(dirname "$0"); cd ..; pwd) # absolute path of buildpack
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
CL_DIR="$CACHE_DIR/sbcl"
CL_IMPL="sbcl-bin"
CL_IMPL_VER="$(getenv CL_IMPL_VER '2.2.0')" # safe to update this manually
QL_DIST_VER="$(getenv QL_DIST_VER '2021-12-30')" # safe to update this manually

####################
# 2. Run Buildpack #
####################
info "====== Common Lisp Buildpack $BUILDPACK_VERSION ======"
info "BUILDPACK_DIR: $BUILDPACK_DIR"
info "BUILD_DIR: $BUILD_DIR"
info "CACHE_DIR: $CACHE_DIR"
info "ENV_DIR: $ENV_DIR"
info "CL_DIR: $CL_DIR"
info "CL_IMPL: $CL_IMPL"
info "CL_IMPL_VER: $CL_IMPL_VER"
info "QL_DIST_VER: $QL_DIST_VER"

if [ "$RESET_CACHE" ]; then
    log "Flushing Cache..."
    rm -rf "${CACHEDIR:?}/"*
fi

##########################################
log "I. Installing STEEL BANK COMMON LISP"
##########################################

CL_PACKAGE=" https://sourceforge.net/projects/sbcl/files/sbcl/$CL_IMPL_VER/sbcl-$CL_IMPL_VER-x86-64-linux-binary.tar.bz2/download"
DECOMPRESS="tar jxf - -C $CL_DIR"

rm -rf $CL_DIR # delete old leftover directory

if [ ! -d $CL_DIR ]; then
    info "Fetching STEEL BANK COMMON LISP..."
    mkdir -p $CL_DIR && curl -L $CL_PACKAGE -o - | $DECOMPRESS
fi

# Add to slug
cp -r $CL_DIR $BUILD_DIR
info "STEEL BANK COMMON LISP Version $CL_IMPL_VER Successfully Installed"

##############################
log "II. Installing Quicklisp"
##############################

if [ ! -d $BUILDPACK_DIR/lib/ ] ; then
    info "Fetching Quicklisp..."
    mkdir $BUILDPACK_DIR/lib  && curl https://beta.quicklisp.org/quicklisp.lisp -o $BUILDPACK_DIR/lib/quicklisp.lisp
    info "Quicklisp Successfully Installed"
fi

####################################
log "III. Compiling Lisp Executable"
####################################

export BUILDPACK_DIR
export BUILD_DIR
export CACHE_DIR
info "Starting Build..."
info "Loading $BUILDPACK_DIR/bin/make.lisp..."
# As per /sbcl-$CL_IMPL_VER-x86-64-linux/INSTALL, we run SBCL without installing
# it, from the top of binary distribution directory: $ sh run-sbcl.sh
sh $CL_DIR/sbcl-$CL_IMPL_VER-x86-64-linux/run-sbcl.sh --dynamic-space-size 2000 --load "$BUILDPACK_DIR/bin/make.lisp"
mv -v "$BUILD_DIR/src/ProjectIsidore" "$BUILD_DIR/ProjectIsidore"
chmod a+x "$BUILD_DIR/ProjectIsidore" # grant permissions for application
log "Successfully Loaded $BUILDPACK_DIR/bin/make.lisp"
