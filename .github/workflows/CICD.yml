# Continous Integration and Delivery.yml

# Continous Integration and Continous Delivery are combined. This is done in the
# file make.lisp where the seperate system 'project-isidore-test' is loaded and
# 'asdf:test-system' is ran prior to building the application as a standalone
# binary. This does mean both 'project-isidore' and 'project-isidore-test' are
# loaded into the lisp image.

name: CICD

# Controls when the action will run. Triggers the workflow upon push or pull
# request to 'master branch' OR Trigger workflow manually through
# Github Actions repo website. Upon tag starting with 'v', job named
# 'create_release' is run.

on:
  push:
    branches: [ master ]
    tags:
      - "v*"
  pull_request:
    branches: [ master ]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  stage_on_production:
    name: Stage to Production Machine
    runs-on: [ubuntu-latest]

    steps:
    - name: Configure SSH
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh/
        echo "${{ Env.SSH_PRIVATE_KEY }}" > ~/.ssh/oracle-vm-key
        chmod 600 ~/.ssh/oracle-vm-key
        cat >>~/.ssh/config <<END
        Host remote-prod
          HostName              ${{ Env.SSH_HOST }}
          User                  debian
          IdentityFile          ~/.ssh/oracle-vm-key
          StrictHostKeyChecking no
        END

    # Should you encounter,
    # insufficient permission for adding an object to repository database
    # Run the command EXACTLY as written: sudo chown -R "${USER:-$(id -un)}" .
    # in the root of the remote-prod git repo.
    - name: Build Project Isidore
      run: |
        ssh remote-prod 'cd /home/debian/quicklisp/local-projects/project-isidore && \
          git fetch && git reset --hard origin/master && \
          /usr/local/bin/sbcl --dynamic-space-size 2048 \
          --load /home/debian/quicklisp/local-projects/project-isidore/make.lisp'

  build_docker_image:
    name: Docker Image Build
    # Only run create_release if the tag starts with 'v'
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: [ubuntu-latest]
    # Following jobs must succeed
    needs: [deploy_on_production]
    permissions:
      packages: write
      contents: read

    steps:
    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    # $GITHUB_WORKSPACE may vary under $MATRIX.OS
    - name: Clone Project Isidore Repository
      uses: actions/checkout@v3

    - name: Create Dockerfile
      run: |
        FLY_CONFIG=$(cat << EOF
        FROM clfoundation/sbcl:2.2.4-slim as build
        COPY . /project-isidore/
        ARG BUILD_DIR=/project-isidore
        ARG QL_DIST_VER=2022-04-01
        RUN apt-get update \
            && sbcl --dynamic-space-size 512 --load $BUILD_DIR/make.lisp \
            && chmod a+x $BUILD_DIR/bin/ProjectIsidore
        FROM gcr.io/distroless/base-debian11
        COPY --from=build /lib/x86_64-linux-gnu/libz.so.1 /lib/x86_64-linux-gnu/libz.so.1
        COPY --from=build /project-isidore/bin/ /project-isidore/bin/
        COPY --from=build /project-isidore/assets/ /project-isidore/assets/
        COPY --from=build /project-isidore/data/ /project-isidore/data/
        CMD ["/project-isidore/bin/ProjectIsidore"]
        EOF
        )
        echo "FLY_CONFIG<<EOF" >> $GITHUB_ENV
        echo "$FLY_CONFIG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      id: fly_config

    - name: Write Dockerfile Configuration
      run: |
        echo '${{ env.FLY_CONFIG }}' >> ${{ github.workspace }}/Dockerfile

    - name: Build Container Image
      run: docker build . --file Dockerfile --tag project-isidore --label "runnumber=${GITHUB_RUN_ID}"

    - name: Login to Github Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push Image to Github Container Registry
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/project-isidore
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag project-isidore $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION

  build_executable_linux:
    name: GNU/Linux Build
    # Only run create_release if the tag starts with 'v'
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    # Following jobs must succeed
    needs: [deploy_on_production]
    runs-on: [ubuntu-latest]

    steps:
    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    # $GITHUB_WORKSPACE may vary under $MATRIX.OS
    - name: Clone Project Isidore Repository
      uses: actions/checkout@v3

    - name: Setup GNU/Linux Environment
      run: |
        echo "BUILD_DIR=${{ github.workspace }}/" >> $GITHUB_ENV
        echo "QL_DIST_VER=2022-04-01" >> $GITHUB_ENV

    - name: Install SBCL & Quicklisp
      run: |
        sudo apt update \
        sudo apt install sbcl zlib1g-dev

    - name: Build Project Isidore
      run: sbcl --load $BUILD_DIR/make.lisp

    # Github current policy is to retain logs and artifacts for 90 days.
    - name: GNU/Linux Upload Lisp Build
      uses: actions/upload-artifact@v2
      with:
        name: pi-build-Linux
        path: |
          ${{ github.workspace }}/bin/
          ${{ github.workspace }}/assets/
          ${{ github.workspace }}/data/
          ${{ github.workspace }}/COPYING.txt

  build_executable_macOS:
    name: Darwin Build
    # Only run create_release if the tag starts with 'v'
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    # Following jobs must succeed
    needs: [deploy_on_production]
    runs-on: [macos-latest]

    steps:
    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    # $GITHUB_WORKSPACE may vary under $MATRIX.OS
    - name: Clone Project Isidore Repository
      uses: actions/checkout@v3

    - name: Setup MacOS Environment
      run: |
        echo "BUILD_DIR=${{ github.workspace }}/" >> $GITHUB_ENV
        echo "QL_DIST_VER=2022-04-01" >> $GITHUB_ENV

    - name: Install SBCL & Quicklisp
      run: |
        brew install sbcl zlib

    - name: Build Project Isidore
      run: sbcl --load $BUILD_DIR/make.lisp

    # Github current policy is to retain logs and artifacts for 90 days.
    - name: Darwin Upload Lisp Build
      uses: actions/upload-artifact@v2
      with:
        name: pi-build-macOS
        path: |
          ${{ github.workspace }}/bin/
          ${{ github.workspace }}/assets/
          ${{ github.workspace }}/data/
          ${{ github.workspace }}/COPYING.txt

  build_executable_windows:
    name: MSWindows Build
    # Only run create_release if the tag starts with 'v'
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    # Following jobs must succeed
    needs: [deploy_on_production]
    runs-on: [windows-latest]

    steps:
    # Microsoft Windows has evolved in parallel with UNIX systems to
    # have different pathnames and newline characters.
    # Note well the %HOMEPATH% variable is not set in [windows-latest] runner environments.
    # See also https://github.com/actions/virtual-environments/issues/1301.
    # Also note conversion of UNIX style line endings (LF)
    # to Windows style lines endings (CRLF) must be disabled when
    # checking out the git repository.
    # SBCL does not support CRLF. For more information see
    # https://sourceforge.net/p/sbcl/mailman/message/27045870/
    # https://stackoverflow.com/questions/17926556/on-windows-cr-still-here-after-read-line-in-common-lisp
    - name: Setup Windows Environment
      shell: pwsh
      run:
        git config --global core.autocrlf false;
        echo "BUILD_DIR=${{ github.workspace }}\" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append;
        echo "CACHE_DIR=${{ github.workspace }}\buildcache\" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append;
        echo "QL_DIST_VER=2022-04-01" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append;
        echo "CL_IMPL_VER=2.2.4" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append;

    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    # $GITHUB_WORKSPACE may vary under $MATRIX.OS
    - name: Clone Project Isidore Repository
      uses: actions/checkout@v3

    # No convenient apt or brew package managers.
    # Download and unzip binary from official SBCL repository.
    - name: Install SBCL & Quicklisp
      shell: pwsh
      run:
        mkdir "${{ Env.CACHE_DIR }}";
        Invoke-WebRequest -UserAgent "Wget" -uri " https://sourceforge.net/projects/sbcl/files/sbcl/${{ Env.CL_IMPL_VER }}/sbcl-${{ Env.CL_IMPL_VER }}-x86-64-windows-binary.msi/download " -Method "GET" -OutFile "${{ Env.CACHE_DIR }}sbcl-bin.msi";
        mkdir "${{ Env.CACHE_DIR }}sbcl\";
        Start-Process msiexec.exe -Wait -ArgumentList '/I ${{ Env.CACHE_DIR }}sbcl-bin.msi INSTALLDIR="${{ Env.CACHE_DIR }}sbcl\" /quiet';
        Invoke-WebRequest -uri "https://beta.quicklisp.org/quicklisp.lisp" -Method "GET" -OutFile "${{ Env.BUILD_DIR }}\quicklisp.lisp";

    - name: Build Project Isidore
      shell: pwsh
      run:
        ${{ Env.CACHE_DIR }}sbcl\sbcl.exe --load "${{ Env.BUILD_DIR }}\src\make.lisp"

    - name: MSWindows Upload Lisp Build
      uses: actions/upload-artifact@v2
      with:
        name: pi-build-Windows
        path: |
          ${{ github.workspace }}/bin/
          ${{ github.workspace }}/assets/
          ${{ github.workspace }}/data/
          ${{ github.workspace }}/COPYING.txt

  create_release:
    name: Create Github Release
    # Only run create_release if the tag starts with 'v'
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: [ubuntu-latest]
    # Following jobs must succeed
    needs: [build_docker_image, build_executable_linux, build_executable_macOS, build_executable_windows]

    steps:
    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    # $GITHUB_WORKSPACE may vary under $MATRIX.OS
    - name: Clone Project Isidore Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: '0'

    # Extract 'v*.*.*' from git refs
    - name: Set Environment Variables
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Download Artifacts
    # Downloads all executable artifacts in it's own folder to the current working directory
      uses: actions/download-artifact@v2

    # TODO: Convert Declt generated .texi to .pdf and .info and upload as well?
    - name: Format Release Notes
      shell: bash
      run: |
        echo "Project Changelog Conventions:" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Feature - A new feature" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Fix - A bug fix" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Performance - A code change that improves performance" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Docs - Documentation only changes" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Tests - Adding missing tests or correcting existing tests" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Build - Changes that affect the build system or external dependencies" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "CI - Changes to our Continous Integration/Continous Delivery configuration files and scripts" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Chore - Other changes that don't modify src or test files" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Style - Changes that do not affect the meaning of the code (white-space formatting)" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Revert - Reverts a previous commit" >> ${{ github.workspace }}/CHANGELOG.txt
        declare -a arr=("Feat" "Fix" "Perf" "Docs" "Tests" "Build" "CI" "Refactor" "Chore" "Style" "Revert")
        for i in "${arr[@]}"
        do
            export commitdata=$(git log $(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))..$(git describe --tags --abbrev=0) --pretty=format:"[%h] (%as) %s" -i -E --grep="^(${i}\:)*${i}\:")
            # if $commitdata is empty
            if [ -z "$commitdata" ]
            then
                echo "Commit type ${i} is empty"
            else
                echo "* ${i}" >> ${{ github.workspace }}/CHANGELOG.txt
                echo "" >> ${{ github.workspace }}/CHANGELOG.txt
                git log $(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))..$(git describe --tags --abbrev=0) --pretty=format:"[%h] (%as) %s" -i -E --grep="^(${i}\:)*${i}\:" >> ${{github.workspace }}/CHANGELOG.txt
                echo "" >> ${{ github.workspace }}/CHANGELOG.txt
            fi
        done

    - name: Stage for Release
      run: |
        pushd ${{ github.workspace }}/pi-build-Linux
        zip -r project-isidore-Linux-x86-64-${{ env.RELEASE_VERSION }}.zip ./*
        popd
        pushd ${{ github.workspace }}/pi-build-macOS
        zip -r project-isidore-macOS-x86-64-${{ env.RELEASE_VERSION }}.zip ./*
        popd
        pushd ${{ github.workspace }}/pi-build-Windows
        # IMPORTANT Bash RELEASE_VERSION variable does not inherit properly when using msys2 during the 'build_exectuable_windows' job. Go figure.
        zip -r project-isidore-Windows-x86-64-${{ env.RELEASE_VERSION }}.zip ./*
        popd

    - name: Release Project Isidore
      uses: softprops/action-gh-release@v1
      with:
        discussion_category_name: "Announcements"
        name: "Project Isidore | New in ${{ env.RELEASE_VERSION }}"
        body_path: ${{ github.workspace }}/CHANGELOG.txt
        files: |
          ${{ github.workspace }}/pi-build-Linux/project-isidore-Linux-x86-64-${{ env.RELEASE_VERSION }}.zip
          ${{ github.workspace }}/pi-build-macOS/project-isidore-macOS-x86-64-${{ env.RELEASE_VERSION }}.zip
          ${{ github.workspace }}/pi-build-Windows/project-isidore-Windows-x86-64-${{ env.RELEASE_VERSION }}.zip
