# Continous Delivery.yml
#
# Copyright (c) 2021 Hanshen Wang.
#
# Author: Hanshen Wang <Hanshen@HanshenWang.com>
# URL: https://github.com/HanshenWang/project-isidore
#
# This file is part of Project Isidore.
#
# Project Isidore is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Project Isidore is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Project Isidore.  If not, see <https://www.gnu.org/licenses/>.

name: CD

# Controls when the action will run. Triggers the workflow upon push or pull
# request to 'master branch' OR Trigger workflow manually through
# Github Actions repo website
on:
  push:
    branches: [ master ]
    tags:
      - "v*"
  pull_request:
    branches: [ master ]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_executable_linux:
    name: GNU/Linux Build
    runs-on: [ubuntu-latest]

    steps:
    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    # $GITHUB_WORKSPACE may vary under $MATRIX.OS
    - uses: actions/checkout@v2

    - name: Cache .roswell
      id: cache-dot-roswell
      uses: actions/cache@v1
      with:
        path: ~/.roswell
        key: ${{ runner.os }}-dot-roswell-sbcl-bin-${{ hashFiles('**/*.asd') }}
        restore-keys: |
          ${{ runner.os }}-dot-roswell-sbcl-bin-
          ${{ runner.os }}-dot-roswell-

    - name: Install Roswell
      # always run install, since it does some global installs and setup that isn't cached
      env:
       LISP: sbcl-bin
      run: curl -L https://raw.githubusercontent.com/roswell/roswell/master/scripts/install-for-ci.sh | sh -x

    - name: Run Lisp
      continue-on-error: true
      shell: bash
      run: |
        ros -e '(format t "~a:~a on ~a~%...~%~%" (lisp-implementation-type) (lisp-implementation-version) (machine-type))'
        ros -e '(format t " fixnum bits:~a~%" (integer-length most-positive-fixnum))'
        ros -e "(ql:quickload 'trivial-features)" -e '(format t "features = ~s~%" *features*)'

    - name: Update Quicklisp distribution if cached
      shell: bash
      run: ros -e "(ql:update-all-dists :prompt nil)"

    - name: Build Project Isidore
      shell: bash
      run: |
           echo ${{ github.workspace }} # Pathname varies amongst OS
           # Generates 'lispapp' in bin/ folder
           sudo ros build ProjectIsidore.ros

    # Github current policy is to retain logs and artifacts for 90 days.
    - name: GNU/Linux Upload Lisp Build
      uses: actions/upload-artifact@v2
      with:
        name: pi-build-Linux
        path: |
          ${{ github.workspace }}/ProjectIsidore
          ${{ github.workspace }}/assets/
          ${{ github.workspace }}/LICENSE

  build_executable_macOS:
    name: Darwin Build
    runs-on: [macos-latest]

    steps:
    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    # $GITHUB_WORKSPACE may vary under $MATRIX.OS
    - uses: actions/checkout@v2

    - name: Cache .roswell
      id: cache-dot-roswell
      uses: actions/cache@v1
      with:
        path: ~/.roswell
        key: ${{ runner.os }}-dot-roswell-sbcl-bin-${{ hashFiles('**/*.asd') }}
        restore-keys: |
          ${{ runner.os }}-dot-roswell-sbcl-bin-
          ${{ runner.os }}-dot-roswell-

    - name: Install Roswell
      # always run install, since it does some global installs and setup that isn't cached
      env:
       LISP: sbcl-bin
      run: curl -L https://raw.githubusercontent.com/roswell/roswell/master/scripts/install-for-ci.sh | sh -x

    - name: Run Lisp
      continue-on-error: true
      shell: bash
      run: |
        ros -e '(format t "~a:~a on ~a~%...~%~%" (lisp-implementation-type) (lisp-implementation-version) (machine-type))'
        ros -e '(format t " fixnum bits:~a~%" (integer-length most-positive-fixnum))'
        ros -e "(ql:quickload 'trivial-features)" -e '(format t "features = ~s~%" *features*)'

    - name: Update Quicklisp distribution if cached
      shell: bash
      run: ros -e "(ql:update-all-dists :prompt nil)"

    - name: Build Project Isidore
      shell: bash
      run: |
           echo ${{ github.workspace }} # Pathname varies amongst OS
           sudo ros build ProjectIsidore.ros

    # Github current policy is to retain logs and artifacts for 90 days.
    - name: Darwin Upload Lisp Build
      uses: actions/upload-artifact@v2
      with:
        name: pi-build-macOS
        path: |
          ${{ github.workspace }}/ProjectIsidore
          ${{ github.workspace }}/assets/
          ${{ github.workspace }}/LICENSE

  build_executable_windows:
    name: MSWindows Build
    runs-on: [windows-latest]

    steps:
    # Tell git not to convert line endings. Change roswell install dir and add it to path.
    - name: Setup Windows Environment
      run: |
        git config --global core.autocrlf false
        echo "ROSWELL_INSTALL_DIR=$HOME/ros" >> $GITHUB_ENV
        echo "$HOME/ros/bin" >> $GITHUB_PATH

    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    # $GITHUB_WORKSPACE may vary under $MATRIX.OS
    - uses: actions/checkout@v2

    - uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        path-type: inherit
        release: true
        update: true
        install: 'base-devel mingw-w64-x86_64-toolchain p7zip'

    - name: Run MSYS2 once
      shell: msys2 {0}
      run: |
        pwd
        echo $MSYSTEM
        echo $MSYS2_PATH_TYPE
        echo $PATH

    - name: Cache .roswell
      id: cache-dot-roswell
      uses: actions/cache@v1
      with:
        path: ~/.roswell
        key: ${{ runner.os }}-dot-roswell-${{ matrix.lisp }}-${{ hashFiles('**/*.asd') }}
        restore-keys: |
          ${{ runner.os }}-dot-roswell-${{ matrix.lisp }}-
          ${{ runner.os }}-dot-roswell-

    - name: Install Roswell
      # always run install, since it does some global installs and setup that isn't cached
      shell: msys2 {0}
      env:
       LISP: sbcl-bin
      run: curl -L https://raw.githubusercontent.com/roswell/roswell/master/scripts/install-for-ci.sh | sh -x

    - name: Build Project Isidore
      shell: msys2 {0}
      run: |
           echo ${{ github.workspace }}
           ros build ProjectIsidore.ros

    - name: MSWindows Upload Lisp Build
      uses: actions/upload-artifact@v2
      with:
        name: pi-build-Windows
        path: |
          # NOTE THE .EXE REQUIRED FOR WINDOWS BUILDS
          ${{ github.workspace }}/ProjectIsidore.exe
          ${{ github.workspace }}/assets/
          ${{ github.workspace }}/LICENSE

  create_release:
    name: Create Github Release
    # Only run create_release if the tag starts with 'v'
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: [ubuntu-latest]
    # Following jobs must succeed
    needs: [build_executable_linux, build_executable_macOS, build_executable_windows]

    steps:
    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    # $GITHUB_WORKSPACE may vary under $MATRIX.OS
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'

    # Extract 'v*.*.*' from git refs
    - name: Set Environment Variables
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Download Artifacts
    # Downloads all executable artifacts in it's own folder to the current working directory
      uses: actions/download-artifact@v2

    - name: Format Release Notes
      shell: bash
      run: |
        echo "Project Changelog Conventions:" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Feature - A new feature" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Fix - A bug fix" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Performance - A code change that improves performance" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Docs - Documentation only changes" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Tests - Adding missing tests or correcting existing tests" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Build - Changes that affect the build system or external dependencies" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "CI - Changes to our Continous Integration/Continous Delivery configuration files and scripts" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Chore - Other changes that don't modify src or test files" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Style - Changes that do not affect the meaning of the code (white-space formatting)" >> ${{ github.workspace }}/CHANGELOG.txt
        echo "Revert - Reverts a previous commit" >> ${{ github.workspace }}/CHANGELOG.txt
        declare -a arr=("Feat" "Fix" "Perf" "Docs" "Tests" "Build" "CI" "Refactor" "Chore" "Style" "Revert")
        for i in "${arr[@]}"
        do
            export commitdata=$(git log $(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))..$(git describe --tags --abbrev=0) --pretty=format:"[%h] (%as) %s" -i -E --grep="^(${i}\:)*${i}\:")
            # if $commitdata is empty
            if [ -z "$commitdata" ]
            then
                echo "Commit type ${i} is empty"
            else
                echo "* ${i}" >> ${{ github.workspace }}/CHANGELOG.txt
                echo "" >> ${{ github.workspace }}/CHANGELOG.txt
                git log $(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))..$(git describe --tags --abbrev=0) --pretty=format:"[%h] (%as) %s" -i -E --grep="^(${i}\:)*${i}\:" >> ${{github.workspace }}/CHANGELOG.txt
                echo "" >> ${{ github.workspace }}/CHANGELOG.txt
            fi
        done

    - name: Stage for Release
      run: |
        pushd ${{ github.workspace }}/pi-build-Linux
        zip -r project-isidore-Linux-x64-${{ env.RELEASE_VERSION }}.zip ./*
        popd
        pushd ${{ github.workspace }}/pi-build-macOS
        zip -r project-isidore-macOS-x64-${{ env.RELEASE_VERSION }}.zip ./*
        popd
        pushd ${{ github.workspace }}/pi-build-Windows
        # IMPORTANT Bash RELEASE_VERSION variable does not inherit properly when using msys2 during the 'build_exectuable_windows' job. Go figure.
        zip -r project-isidore-Windows-x64-${{ env.RELEASE_VERSION }}.zip ./*
        popd

    - name: Release Project Isidore
      uses: softprops/action-gh-release@v1
      with:
        discussion_category_name: "Announcements"
        name: "Project Isidore | New in ${{ env.RELEASE_VERSION }}"
        body_path: ${{ github.workspace }}/CHANGELOG.txt
        files: |
          ${{ github.workspace }}/pi-build-Linux/project-isidore-Linux-x64-${{ env.RELEASE_VERSION }}.zip
          ${{ github.workspace }}/pi-build-macOS/project-isidore-macOS-x64-${{ env.RELEASE_VERSION }}.zip
          ${{ github.workspace }}/pi-build-Windows/project-isidore-Windows-x64-${{ env.RELEASE_VERSION }}.zip
