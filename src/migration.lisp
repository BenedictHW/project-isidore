;;;; SPDX-FileCopyrightText: 2021 Hanshen Wang <Hanshen@HanshenWang.com>
;;;; SPDX-License-Identifier: AGPL-3.0-or-later

(uiop:define-package #:project-isidore/migration
  (:use #:common-lisp
        #:project-isidore/model)
  ;; No package local nicknames. See commit 1962a26.
  (:documentation
   "Data import: Unified Standard Format Markers (USFM) to Common Lisp Object System (CLOS) objects.

Source text is from: https://github.com/HanshenWang/ENG-B-Haydock1883-pd-PSFM

The functions in this file should be run sequentially.

Example:

(ql:quickload :project-isidore)
(in-package :project-isidore/migration)

(migrate-data \"/home/hanshen/project-isidore/data/ENG-B-Haydock1883-pd-PSFM/\")

The links seen on the page https://www.hanshenwang.com/bible?verses=1-1-1-3-3-3
are generated by `encode-list-to-html'. "))

(in-package #:project-isidore/migration)


;;; These functions below were used to generate *bible-chapter-url-alist*

(defun get-bible-individual-chapter-list ()
  "This iterates through the entire Bible and stores chapters in a list. For
example if book 2 chapter 4 and verse 6 is the last verse of the chapter, 2 4 6
would be appended to the returned list."
  (let ((book-counter 1)
        (chapter-counter 1)
        (verse-counter 1)
        (result-list nil))
    (dotimes (i 35816 result-list)
      (cond
        ((< verse-counter (slot-value (bknr.datastore:store-object-with-id i)
                                      'verse))
         (progn (incf verse-counter)))
        ((< chapter-counter (slot-value (bknr.datastore:store-object-with-id i)
                                        'chapter))
         (progn
           (setf
            result-list
            (append
             result-list
             (list (bible-book-convert-dwim
                    (slot-value
                     (bknr.datastore:store-object-with-id (- i 1)) 'book))
                   (slot-value (bknr.datastore:store-object-with-id (- i 1))
                               'chapter)
                   (slot-value (bknr.datastore:store-object-with-id (- i 1))
                               'verse))))
           (incf chapter-counter)
           (setf verse-counter 1)))
        ((< book-counter (project-isidore/model:bible-book-convert-dwim
                          (slot-value (bknr.datastore:store-object-with-id i)
                                      'book)))
         (progn
           (setf
            result-list
            (append
             result-list
             (list (bible-book-convert-dwim
                    (slot-value (bknr.datastore:store-object-with-id (- i 1))
                                'book))
                   (slot-value (bknr.datastore:store-object-with-id (- i 1))
                               'chapter)
                   (slot-value (bknr.datastore:store-object-with-id (- i 1))
                               'verse))))
           (incf book-counter)
           (setf chapter-counter 1)))))))

;;; FIXME this will miss the very last chapter.
(defun encode-list-to-html ()
  "This will take the list generated by `bet-bible-invidiual-chapter-list' and
return an associative list similar to `*bible-book-url-alist*'."
  (let ((counter 1)
        (book nil)
        (chapter nil)
        (verse nil)
        (result-list nil))
    (dolist (x (get-bible-individual-chapter-list) result-list)
      (cond
        ((= 1 counter)
         (setf book x
               counter (incf counter)))
        ((= 2 counter)
         (setf chapter x
               counter (incf counter)))
        ((= 3 counter)
         (progn
           (setf verse x)
           (setf result-list
                 (append result-list
                         (list
                          (concatenate
                           'string "/bible?verses="
                           (write-to-string book) "-"
                           (write-to-string chapter) "-"
                           "1-"
                           (write-to-string book) "-"
                           (write-to-string chapter) "-"
                           (write-to-string verse)))))
           (setf
            result-list
            (append result-list
                    (list
                     (first
                      (cl-ppcre:split ":"
                                      (get-heading-text
                                       (get-bible-uid book chapter verse)))))))
           (setf counter 1)))))))
